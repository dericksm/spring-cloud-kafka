/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github.dericksm.commons.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class StockData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3244890962945438311L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockData\",\"namespace\":\"com.github.dericksm.commons.schema\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"open\",\"type\":\"double\"},{\"name\":\"high\",\"type\":\"double\"},{\"name\":\"low\",\"type\":\"double\"},{\"name\":\"close\",\"type\":\"double\"},{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"growth\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StockData> ENCODER =
      new BinaryMessageEncoder<StockData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockData> DECODER =
      new BinaryMessageDecoder<StockData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<StockData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<StockData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StockData>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this StockData to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a StockData from a ByteBuffer. */
  public static StockData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence symbol;
  @Deprecated public double open;
  @Deprecated public double high;
  @Deprecated public double low;
  @Deprecated public double close;
  @Deprecated public java.lang.CharSequence date;
  @Deprecated public java.lang.CharSequence growth;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockData() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param symbol The new value for symbol
   * @param open The new value for open
   * @param high The new value for high
   * @param low The new value for low
   * @param close The new value for close
   * @param date The new value for date
   * @param growth The new value for growth
   */
  public StockData(java.lang.CharSequence id, java.lang.CharSequence symbol, java.lang.Double open, java.lang.Double high, java.lang.Double low, java.lang.Double close, java.lang.CharSequence date, java.lang.CharSequence growth) {
    this.id = id;
    this.symbol = symbol;
    this.open = open;
    this.high = high;
    this.low = low;
    this.close = close;
    this.date = date;
    this.growth = growth;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return symbol;
    case 2: return open;
    case 3: return high;
    case 4: return low;
    case 5: return close;
    case 6: return date;
    case 7: return growth;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: symbol = (java.lang.CharSequence)value$; break;
    case 2: open = (java.lang.Double)value$; break;
    case 3: high = (java.lang.Double)value$; break;
    case 4: low = (java.lang.Double)value$; break;
    case 5: close = (java.lang.Double)value$; break;
    case 6: date = (java.lang.CharSequence)value$; break;
    case 7: growth = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return The value of the 'symbol' field.
   */
  public java.lang.CharSequence getSymbol() {
    return symbol;
  }

  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.CharSequence value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'open' field.
   * @return The value of the 'open' field.
   */
  public java.lang.Double getOpen() {
    return open;
  }

  /**
   * Sets the value of the 'open' field.
   * @param value the value to set.
   */
  public void setOpen(java.lang.Double value) {
    this.open = value;
  }

  /**
   * Gets the value of the 'high' field.
   * @return The value of the 'high' field.
   */
  public java.lang.Double getHigh() {
    return high;
  }

  /**
   * Sets the value of the 'high' field.
   * @param value the value to set.
   */
  public void setHigh(java.lang.Double value) {
    this.high = value;
  }

  /**
   * Gets the value of the 'low' field.
   * @return The value of the 'low' field.
   */
  public java.lang.Double getLow() {
    return low;
  }

  /**
   * Sets the value of the 'low' field.
   * @param value the value to set.
   */
  public void setLow(java.lang.Double value) {
    this.low = value;
  }

  /**
   * Gets the value of the 'close' field.
   * @return The value of the 'close' field.
   */
  public java.lang.Double getClose() {
    return close;
  }

  /**
   * Sets the value of the 'close' field.
   * @param value the value to set.
   */
  public void setClose(java.lang.Double value) {
    this.close = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.CharSequence getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.CharSequence value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'growth' field.
   * @return The value of the 'growth' field.
   */
  public java.lang.CharSequence getGrowth() {
    return growth;
  }

  /**
   * Sets the value of the 'growth' field.
   * @param value the value to set.
   */
  public void setGrowth(java.lang.CharSequence value) {
    this.growth = value;
  }

  /**
   * Creates a new StockData RecordBuilder.
   * @return A new StockData RecordBuilder
   */
  public static com.github.dericksm.commons.schema.StockData.Builder newBuilder() {
    return new com.github.dericksm.commons.schema.StockData.Builder();
  }

  /**
   * Creates a new StockData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockData RecordBuilder
   */
  public static com.github.dericksm.commons.schema.StockData.Builder newBuilder(com.github.dericksm.commons.schema.StockData.Builder other) {
    return new com.github.dericksm.commons.schema.StockData.Builder(other);
  }

  /**
   * Creates a new StockData RecordBuilder by copying an existing StockData instance.
   * @param other The existing instance to copy.
   * @return A new StockData RecordBuilder
   */
  public static com.github.dericksm.commons.schema.StockData.Builder newBuilder(com.github.dericksm.commons.schema.StockData other) {
    return new com.github.dericksm.commons.schema.StockData.Builder(other);
  }

  /**
   * RecordBuilder for StockData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockData>
    implements org.apache.avro.data.RecordBuilder<StockData> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence symbol;
    private double open;
    private double high;
    private double low;
    private double close;
    private java.lang.CharSequence date;
    private java.lang.CharSequence growth;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.github.dericksm.commons.schema.StockData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.symbol)) {
        this.symbol = data().deepCopy(fields()[1].schema(), other.symbol);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.open)) {
        this.open = data().deepCopy(fields()[2].schema(), other.open);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.high)) {
        this.high = data().deepCopy(fields()[3].schema(), other.high);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.low)) {
        this.low = data().deepCopy(fields()[4].schema(), other.low);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.close)) {
        this.close = data().deepCopy(fields()[5].schema(), other.close);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.date)) {
        this.date = data().deepCopy(fields()[6].schema(), other.date);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.growth)) {
        this.growth = data().deepCopy(fields()[7].schema(), other.growth);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing StockData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.github.dericksm.commons.schema.StockData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.symbol)) {
        this.symbol = data().deepCopy(fields()[1].schema(), other.symbol);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.open)) {
        this.open = data().deepCopy(fields()[2].schema(), other.open);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.high)) {
        this.high = data().deepCopy(fields()[3].schema(), other.high);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.low)) {
        this.low = data().deepCopy(fields()[4].schema(), other.low);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.close)) {
        this.close = data().deepCopy(fields()[5].schema(), other.close);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.date)) {
        this.date = data().deepCopy(fields()[6].schema(), other.date);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.growth)) {
        this.growth = data().deepCopy(fields()[7].schema(), other.growth);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.github.dericksm.commons.schema.StockData.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.github.dericksm.commons.schema.StockData.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'symbol' field.
      * @return The value.
      */
    public java.lang.CharSequence getSymbol() {
      return symbol;
    }

    /**
      * Sets the value of the 'symbol' field.
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public com.github.dericksm.commons.schema.StockData.Builder setSymbol(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.symbol = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'symbol' field.
      * @return This builder.
      */
    public com.github.dericksm.commons.schema.StockData.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'open' field.
      * @return The value.
      */
    public java.lang.Double getOpen() {
      return open;
    }

    /**
      * Sets the value of the 'open' field.
      * @param value The value of 'open'.
      * @return This builder.
      */
    public com.github.dericksm.commons.schema.StockData.Builder setOpen(double value) {
      validate(fields()[2], value);
      this.open = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'open' field has been set.
      * @return True if the 'open' field has been set, false otherwise.
      */
    public boolean hasOpen() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'open' field.
      * @return This builder.
      */
    public com.github.dericksm.commons.schema.StockData.Builder clearOpen() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'high' field.
      * @return The value.
      */
    public java.lang.Double getHigh() {
      return high;
    }

    /**
      * Sets the value of the 'high' field.
      * @param value The value of 'high'.
      * @return This builder.
      */
    public com.github.dericksm.commons.schema.StockData.Builder setHigh(double value) {
      validate(fields()[3], value);
      this.high = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'high' field has been set.
      * @return True if the 'high' field has been set, false otherwise.
      */
    public boolean hasHigh() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'high' field.
      * @return This builder.
      */
    public com.github.dericksm.commons.schema.StockData.Builder clearHigh() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'low' field.
      * @return The value.
      */
    public java.lang.Double getLow() {
      return low;
    }

    /**
      * Sets the value of the 'low' field.
      * @param value The value of 'low'.
      * @return This builder.
      */
    public com.github.dericksm.commons.schema.StockData.Builder setLow(double value) {
      validate(fields()[4], value);
      this.low = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'low' field has been set.
      * @return True if the 'low' field has been set, false otherwise.
      */
    public boolean hasLow() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'low' field.
      * @return This builder.
      */
    public com.github.dericksm.commons.schema.StockData.Builder clearLow() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'close' field.
      * @return The value.
      */
    public java.lang.Double getClose() {
      return close;
    }

    /**
      * Sets the value of the 'close' field.
      * @param value The value of 'close'.
      * @return This builder.
      */
    public com.github.dericksm.commons.schema.StockData.Builder setClose(double value) {
      validate(fields()[5], value);
      this.close = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'close' field has been set.
      * @return True if the 'close' field has been set, false otherwise.
      */
    public boolean hasClose() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'close' field.
      * @return This builder.
      */
    public com.github.dericksm.commons.schema.StockData.Builder clearClose() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.CharSequence getDate() {
      return date;
    }

    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public com.github.dericksm.commons.schema.StockData.Builder setDate(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.date = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public com.github.dericksm.commons.schema.StockData.Builder clearDate() {
      date = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'growth' field.
      * @return The value.
      */
    public java.lang.CharSequence getGrowth() {
      return growth;
    }

    /**
      * Sets the value of the 'growth' field.
      * @param value The value of 'growth'.
      * @return This builder.
      */
    public com.github.dericksm.commons.schema.StockData.Builder setGrowth(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.growth = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'growth' field has been set.
      * @return True if the 'growth' field has been set, false otherwise.
      */
    public boolean hasGrowth() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'growth' field.
      * @return This builder.
      */
    public com.github.dericksm.commons.schema.StockData.Builder clearGrowth() {
      growth = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockData build() {
      try {
        StockData record = new StockData();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.symbol = fieldSetFlags()[1] ? this.symbol : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.open = fieldSetFlags()[2] ? this.open : (java.lang.Double) defaultValue(fields()[2]);
        record.high = fieldSetFlags()[3] ? this.high : (java.lang.Double) defaultValue(fields()[3]);
        record.low = fieldSetFlags()[4] ? this.low : (java.lang.Double) defaultValue(fields()[4]);
        record.close = fieldSetFlags()[5] ? this.close : (java.lang.Double) defaultValue(fields()[5]);
        record.date = fieldSetFlags()[6] ? this.date : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.growth = fieldSetFlags()[7] ? this.growth : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockData>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockData>
    READER$ = (org.apache.avro.io.DatumReader<StockData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
